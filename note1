1. always语句块 (过程赋值语句)
// always语句的赋值目标必须是reg型
/* 基本格式：
always @ (敏感信号条件表)
各类顺序语句; */

//激活条件：看敏感条件是否满足
//敏感条件有两种，一种是边沿敏感，一种是电平敏感

/*边沿敏感：always @ (posedge CLK)
            always @ (negedge CLK) */

//电平敏感：always @ (信号名列表)  ---当列表中任一信号发生变化，就会触发always语句

//当always语句块中有多条赋值语句，必须将其用begin end包括起来
//assign语句中没有begin end
example1:
module adder (a,b,cin,s,cout);
  input a,b,cin;
  output s, cout;
  reg s, cout;
always @ (a,b,cin)
begin
  s = a^b^cin;
  cout = (a&b)|(a&cin)|(b&cin);
end
endmodule

2. 
//阻塞赋值 Y = m;
//非阻塞赋值 Y <= m;
//always语句块中不能两者混用

example2: 
// assume A和B同时由0变成1
// M1, M2, Q初值为0
A. 
always @ (A, B)
begin
  M1 = A;
  M2 = B & M1;
  Q  = M1 | M2;
end
// 先计算 M1 = 1
// B=1， M1=1, M2 = 1
// Q = 1| 1= 1
B.
always @ (A, B)
begin
  M1 <= A;
  M2 <= B & M1;
  Q  <= M1 | M2;
end
// 先计算 A = 1，但等待，不赋值给M1
// 计算B & M1, B=1, M1=0, 结果为0。等待，不赋值给M2
// 计算M1 | M2，M1=0, M2=0, 结果为0。等待，不赋值给Q
// 所有过程结束
// 再先后赋值, M1 = 1, M2 = 0, Q = 0

//设计组合电路时常用 阻塞赋值
//设计时序电路时常用 非阻塞赋值

3. 调用 例化 Module Instantiations
// 调用格式：
// 底层模块名称 例化名（端口映射）；
/* 端口映射：
命名法格式：(.底层端口名称1(外接信号名1), .底层端口名称2(外接信号名2), ...)

example3: 
底层模块 D Flip-flop:
module DFF (CLK, D, Q);
 input D, CLK;
 output Q;
 reg Q;
always @ (posedge CLK)
 Q<=D
endmodule

//现在要使用这个D触发器设计一个时序电路
//为了调用底层模块，需要加两个内部变量d1和q1，并给两次调用的这个底层模块命名
电路：
module circuit (clk, d, a, q);
 input d, a, clk;
 output q;

 wire d1;
 wire q1;

DFF dff1 (.CLK(clk), .D(d1), .Q(q1)); //格式参见上面3.，这里的dff1就是例化名，随便起别重复
DFF dff2 (.CLK(q1), .D(d), .Q(q)); //也可以按顺序照着上面的写法：DFF dff2(q1,d,q);但不建议这样写

or(d1, a, q); //这行没看懂

endmodule

4. 门原语 Primitive
// 门源语调用格式：
// 门原语名称 实例名 （端口连接）；---实例名可省略；端口连接采用顺序法，输出在前，输入在后

example4:
and (out, in1, in2); //寻常AND门

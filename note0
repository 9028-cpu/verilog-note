1. verilog 模块结构

example1: 二选一多路选择器 
module MUX21a (a,b,s,y); // module 模块名称 (端口列表); 列出输入/输出信号
  // 端口信号声明; 
  input a,b,s; 
  output y; 
  //说明端口信号的输入/输出属性：input/output/inout; 
  //说明信号的数据类型：wire/reg; 这里如果不做说明，默认为wire型
  //说明信号的位宽[m:n]; 这里如果不做说明，默认为1位
  assign y = (s?a:b); // assign语句；
endmodule

example2:
module full_adder (A,B,CIN,S,COUT);
  input [3:0] A,B;
  input CIN;
  output reg [3:0] S;
  //这里S位宽是4位，对应信号为S[3], S[2], S[1], S[0]
  output COUT;

2. assign语句 （连续赋值语句）
//assign语句的赋值目标必须是wire型

/* A. 算数型
  加减乘除 + - * /
  求余 %
  求幂 ** */
example3:
5 % 2 = 1, 5 % -2 = 1;
-5 % 2 = -1, -5 % -2 = -1;
2**3 = 8;

/* B. 逻辑型
  !  逻辑非
  && 逻辑或
  || 逻辑与
  逻辑型运算的操作数可以是表达式（加括号），并且逻辑型运算的结果只可能是 1， 0， x */
example4:

/* C. 关系运算符
  >, <, >=, <=
  关系运算的结果只可能是1， 0， x */

/* D. 等价运算符
  ==  等于
  !=  不等于
  === identical
  !== not identical
  等于和不等于运算的结果只可能是1, 0, x;
  对于identical运算，只有完全一模一样才是identical，并且结果只可能是1或者0   */

/* E. 按位运算符
  ~  按位非
  &  按位与
  |  按位或
  ^  按位异或
  ~^
  ^~ 按位同或
  如果操作数位宽不同，位宽较小的 自动左添0补齐，结果与操作数位宽相同 */

/* F. 缩减运算符
  &  缩减与
  ~& 缩减与非
  |  缩减或
  ~| 缩减或非
  ^  缩减异或
  ~^
  ^~ 缩减同或
  缩减运算的操作数只有一个，将这个数的各位 从左至右 进行逻辑运算， 结果只有一位 */
example5:
operand = 4'b0011;
& operand = 0;
~& operand = 1;
| operand = 1;
~| operand = 0;
^ operand = 0;
^~ operand = 1;

/* G. 移位运算符
  >>  右移
  <<  左移
  >>> 算术右移
  <<< 算术左移
  格式： 操作数 移位符 n;
  移位自动补0，只有对有符号数的算术右移运算自动补符号位 */
example6:
Y = 4'b1001 >> 1; 
  //结果为0100
Y = 4'b1001 >>> 1; 
  //结果为1100

/* H. Concatenation Operator
  {}   拼接
  格式：{operand1, operand2, ...}
   I. Replication Operator
  {{}} 复制
  格式：{n{operand1, operand2, ...}} */
example7:
Y = {4'b1001, 2'b11};
  //结果为100111
Y = {4{2'b01}};
  //结果为01010101

/* J. 条件运算符
  ?:
  格式：A ? B : C ---如果A为真，选择B，否则C
  如果表达式A为x，结果为x   */

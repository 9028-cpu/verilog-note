主要作补充

lecture2
1. 
logic values:
z --- disconnect, which means not contribute to the output

2. 
Data type declarations: data_type [size] ... ...
A. Net Data type:
  wire x;
  tri [7:0] Dataout; // --- used for tri-state circuit nodes
B. Register Data type:
  reg ...;    // --- unsigned variable of any bit size
  interger k; // --- signed 32-bit variable
C. Memory Data type:
  reg [7:0] R [3:0]; // --- declare 4 8-bit variables
  R[3]               // --- access this one
  R[3][7]            // --- access the left most bit of this one R[3]
D. Parameter Data type:
  parameter n = 32; 
  example: n-bit adder

lecture4
1.
Parameter Redefinition: (P12)
// Parameters in a module may be redefined for each instance
A. Explicit PR
  module_name instance_name (signal1, signal2, ...);
  defparam instance_name.parameter_name = value;
B. Implicit PR
  module_name #(value1, value2) instance_name(signal1, signal2);

example:

2.
The generate Construct:
/* Syntax:
  generate
    [procedural statements]
      [instantiation statements]
  endgenerate    */
//The loop index must be declared of type "genvar" which is a positive integer that appears only in generate blocks

example:

lecture5
1.
Primitive Instantiations:
/* Gate types:
A. Normal gate:
	and, nand, or, nor, xor, xnor, not(f,...) */
B. Notif and Bufif gates are tri-state buffers:
	buf   	//f=a   buf(f,a)
	notif0	//f=()	notif0(f,a,e)
	notif1	//f=()	notif1(f,a,e)
	bufif0	//f=()	bufif0(f,a,e)
	bufif1	//f=()	bufif1(f,a,e)

2.
Delay:
// Up to 3 delays can be defined
example:
A. and #(2) o1 (out1,a,b)
// If only on delay is defined, it is for all
B. and #(2,3) o2 (out2,a,b)
// If two delays are defined, they are rise and fall delays
C. bufif0 #(5,6,7) o3 (out3,a,b)
// If three delays are defined, they are rise, fall, turn-off delays, which can only be used for buffers

3. 
对于一个电路图，有三种方式来进行描述：
A. 门级描述: Primitive instantiation
B. 数据流级描述：Continuous assignment
C. 行为级描述：（使用always语句块）
// always block process statements repeatedly
// initial block process statements one time

4.
这节还提到了阻塞分配 和 非阻塞分配

lecture6
1. 
if...else...用法

2.
case:
casez: treat z as don't care values
casex: treat z and x as don't care values
注意这里的statements是in order的

3.
Loop:
A. for:
	for循环执行内部statements，直到迭代条件满足
example:
module bit_count (X,Count);
	parameter n=4;
	parameter logn=2;
	input [n-1:0] X;
	output reg [logn:0] Count;
	integer k; //这里不用genvar吗？

	always @ (X)
	begin
		Count = 0;
		for(k=0;k<n;k=k+1)
		Count = Count + X[k];
	end
endmodule
B. while:
	while执行给定的statements直到表达式是false
	//如果一开始while里的statements就是false，则没有statement需要被执行
example:
C. repeat:
	repeat执行给定的statements以一定的次数n
example:
	initial
	begin
		repeat (10) a=a+~b;
	end
D. forever:
	forever永不停止statements
